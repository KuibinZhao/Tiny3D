#include "shader/util.glsl"

layout(local_size_x = WORKGROUP_SIZE) in;

struct Transform {
	vec4 trans;
	vec4 rotat;
	vec4 bound;
	vec4 meshid;
};

layout(binding = 1, std430) buffer InPosition {
	Transform inTrans[];
};

layout(binding = 2, std430) buffer OutPosition {
	mat4 outMatrices[];
};

layout(binding = 3) buffer IndirectBuff {
	uint count;
	uint primCount;
	uint firstIndex;
	uint baseVertex;
	uint baseInstance;
} indirect;

layout(binding = 0) uniform sampler2D texDepth;
uniform mat4 viewProjectMatrix;
uniform float isColor;

void main() {
	uint curIndex = gl_GlobalInvocationID.x;
	
	Transform transform = inTrans[curIndex];
	vec3 translate = transform.trans.xyz;
	float scale = transform.trans.w;
	vec4 rotate = transform.rotat;
	mat4 outMat = Translate(translate) * QuatToMat4(rotate) * Scale(scale);

	if(isColor < 0.1) outMatrices[atomicAdd(indirect.primCount, 1)] = outMat;
	else {
		vec4 bound = transform.bound;
		vec3 size = bound.xyz;
		vec3 pose = vec3(translate.x, bound.w, translate.z);

		vec4 bv0 = vec4(pose + size * vec3( 0.5, 0.5,  0.5), 1.0);
		vec4 bv1 = vec4(pose + size * vec3( 0.5, 0.5, -0.5), 1.0);
		vec4 bv2 = vec4(pose + size * vec3(-0.5, 0.5, -0.5), 1.0);
		vec4 bv3 = vec4(pose + size * vec3(-0.5, 0.5,  0.5), 1.0);

		bv0 = viewProjectMatrix * bv0;
		bv1 = viewProjectMatrix * bv1;
		bv2 = viewProjectMatrix * bv2;
		bv3 = viewProjectMatrix * bv3;

		vec3 t0 = bv0.xyz / bv0.w * 0.5 + 0.5;
		vec3 t1 = bv1.xyz / bv1.w * 0.5 + 0.5;
		vec3 t2 = bv2.xyz / bv2.w * 0.5 + 0.5;
		vec3 t3 = bv3.xyz / bv3.w * 0.5 + 0.5;

		vec4 ocDepth = vec4(texture(texDepth, t0.xy).x,
							texture(texDepth, t1.xy).x,
							texture(texDepth, t2.xy).x,
							texture(texDepth, t3.xy).x);
		vec4 bbDepth = vec4(t0.z, t1.z, t2.z, t3.z);
		vec4 dd = bbDepth - ocDepth;
		
		if(all(greaterThan(dd, vec4(0.0001)))) return;
		else outMatrices[atomicAdd(indirect.primCount, 1)] = outMat;
	}
}


